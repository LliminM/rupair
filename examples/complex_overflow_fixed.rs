fn main () { let mut small_buffer = vec ! [0u8 ; 5] ; let mut large_buffer = vec ! [0u8 ; 20] ; let small_ptr = small_buffer . as_mut_ptr () ; let large_ptr = large_buffer . as_mut_ptr () ; let offsets = [0 , 2 , 4 , 6 , 8 , 10 , 12] ; unsafe { for & offset in & offsets { if offset < small_buffer . len () { * small_ptr . add (offset) = (offset * 2) as u8 ; } else { if offset % 2 == 0 { * small_ptr . add (offset) = 99 ; } else { * large_ptr . add (offset) = 88 ; } } } } process_buffer (& mut small_buffer) ; println ! ("Small buffer: {:?}" , small_buffer) ; println ! ("Large buffer: {:?}" , large_buffer) ; } fn process_buffer (buffer : & mut Vec < u8 >) { let ptr = buffer . as_mut_ptr () ; unsafe { * ptr . add (8) = 255 ; } }