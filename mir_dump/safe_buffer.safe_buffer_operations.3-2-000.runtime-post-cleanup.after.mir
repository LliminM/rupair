// MIR for `safe_buffer_operations` after runtime-post-cleanup

fn safe_buffer_operations() -> Result<(), Box<dyn std::error::Error>> {
    let mut _0: std::result::Result<(), std::boxed::Box<dyn std::error::Error>>;
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: std::boxed::Box<[i32; 5]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[i32; 5]>;
    let mut _9: usize;
    let mut _10: &std::vec::Vec<i32>;
    let _11: ();
    let mut _12: &mut std::vec::Vec<i32>;
    let mut _13: &[i32];
    let _14: &[i32];
    let mut _15: &std::vec::Vec<i32>;
    let _16: &std::vec::Vec<i32>;
    let _17: ();
    let _18: ();
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str; 2];
    let _21: &[&str; 2];
    let _22: [&str; 2];
    let mut _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &std::vec::Vec<i32>;
    let _28: &std::vec::Vec<i32>;
    let _29: ();
    let mut _30: std::iter::Enumerate<std::slice::Iter<'_, i32>>;
    let mut _31: std::iter::Enumerate<std::slice::Iter<'_, i32>>;
    let mut _32: std::slice::Iter<'_, i32>;
    let mut _33: &[i32];
    let _34: &[i32];
    let mut _35: &std::vec::Vec<i32>;
    let mut _37: ();
    let _38: ();
    let mut _39: std::option::Option<(usize, &i32)>;
    let mut _40: &mut std::iter::Enumerate<std::slice::Iter<'_, i32>>;
    let mut _41: &mut std::iter::Enumerate<std::slice::Iter<'_, i32>>;
    let mut _42: isize;
    let mut _43: !;
    let mut _46: bool;
    let mut _47: usize;
    let mut _48: usize;
    let mut _49: &std::vec::Vec<i32>;
    let mut _50: i32;
    let mut _51: (i32, bool);
    let mut _52: &mut i32;
    let mut _53: &mut std::vec::Vec<i32>;
    let mut _54: usize;
    let _55: ();
    let _56: ();
    let mut _57: std::fmt::Arguments<'_>;
    let mut _58: &[&str; 2];
    let _59: &[&str; 2];
    let _60: [&str; 2];
    let mut _61: &[core::fmt::rt::Argument<'_>; 1];
    let _62: &[core::fmt::rt::Argument<'_>; 1];
    let _63: [core::fmt::rt::Argument<'_>; 1];
    let mut _64: core::fmt::rt::Argument<'_>;
    let mut _65: &std::vec::Vec<i32>;
    let _66: &std::vec::Vec<i32>;
    let _68: &[i32];
    let mut _69: &std::vec::Vec<i32>;
    let mut _70: std::ops::RangeFull;
    let _72: &[i32];
    let mut _73: &[i32];
    let mut _74: std::ops::RangeTo<usize>;
    let mut _75: usize;
    let mut _76: usize;
    let mut _77: &[i32];
    let _78: ();
    let _79: ();
    let mut _80: std::fmt::Arguments<'_>;
    let mut _81: &[&str; 2];
    let _82: &[&str; 2];
    let _83: [&str; 2];
    let mut _84: &[core::fmt::rt::Argument<'_>; 1];
    let _85: &[core::fmt::rt::Argument<'_>; 1];
    let _86: [core::fmt::rt::Argument<'_>; 1];
    let mut _87: core::fmt::rt::Argument<'_>;
    let mut _88: &&[i32];
    let _89: &&[i32];
    let _90: ();
    let mut _91: std::option::Option<&i32>;
    let mut _92: &[i32];
    let _93: &[i32];
    let mut _94: &std::vec::Vec<i32>;
    let mut _95: isize;
    let _97: ();
    let _98: ();
    let mut _99: std::fmt::Arguments<'_>;
    let mut _100: &[&str; 2];
    let _101: &[&str; 2];
    let _102: [&str; 2];
    let mut _103: &[core::fmt::rt::Argument<'_>; 1];
    let _104: &[core::fmt::rt::Argument<'_>; 1];
    let _105: [core::fmt::rt::Argument<'_>; 1];
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &&i32;
    let _108: &&i32;
    let mut _110: std::boxed::Box<[i32]>;
    let mut _111: std::boxed::Box<[i32; 3]>;
    let mut _112: usize;
    let mut _113: usize;
    let mut _114: *mut u8;
    let mut _115: std::boxed::Box<[i32; 3]>;
    let _116: ();
    let mut _117: &mut std::vec::Vec<i32>;
    let mut _118: usize;
    let mut _119: &std::vec::Vec<i32>;
    let _120: ();
    let mut _121: &mut std::vec::Vec<i32>;
    let mut _122: &[i32];
    let _123: &[i32];
    let mut _124: &std::vec::Vec<i32>;
    let _125: &std::vec::Vec<i32>;
    let _126: ();
    let _127: ();
    let mut _128: std::fmt::Arguments<'_>;
    let mut _129: &[&str; 2];
    let _130: &[&str; 2];
    let _131: [&str; 2];
    let mut _132: &[core::fmt::rt::Argument<'_>; 1];
    let _133: &[core::fmt::rt::Argument<'_>; 1];
    let _134: [core::fmt::rt::Argument<'_>; 1];
    let mut _135: core::fmt::rt::Argument<'_>;
    let mut _136: &std::vec::Vec<i32>;
    let _137: &std::vec::Vec<i32>;
    let _138: ();
    let mut _139: std::slice::Chunks<'_, i32>;
    let mut _140: std::slice::Chunks<'_, i32>;
    let mut _141: &[i32];
    let _142: &[i32];
    let mut _143: &std::vec::Vec<i32>;
    let _145: ();
    let mut _146: std::option::Option<&[i32]>;
    let mut _147: &mut std::slice::Chunks<'_, i32>;
    let mut _148: &mut std::slice::Chunks<'_, i32>;
    let mut _149: isize;
    let mut _150: !;
    let _152: ();
    let _153: ();
    let mut _154: std::fmt::Arguments<'_>;
    let mut _155: &[&str; 2];
    let _156: &[&str; 2];
    let _157: [&str; 2];
    let mut _158: &[core::fmt::rt::Argument<'_>; 1];
    let _159: &[core::fmt::rt::Argument<'_>; 1];
    let _160: [core::fmt::rt::Argument<'_>; 1];
    let mut _161: core::fmt::rt::Argument<'_>;
    let mut _162: &&[i32];
    let _163: &&[i32];
    let _164: ();
    let mut _165: &mut std::vec::Vec<i32>;
    let _166: ();
    let mut _167: &mut std::vec::Vec<i32>;
    let _168: ();
    let _169: ();
    let mut _170: std::fmt::Arguments<'_>;
    let mut _171: &[&str; 2];
    let _172: &[&str; 2];
    let _173: [&str; 2];
    let mut _174: &[core::fmt::rt::Argument<'_>; 1];
    let _175: &[core::fmt::rt::Argument<'_>; 1];
    let _176: [core::fmt::rt::Argument<'_>; 1];
    let mut _177: core::fmt::rt::Argument<'_>;
    let mut _178: &std::vec::Vec<i32>;
    let _179: &std::vec::Vec<i32>;
    let mut _180: ();
    let mut _188: &i32;
    let mut _189: *const [i32; 5];
    let mut _190: *const [i32; 3];
    scope 1 {
        debug data => _1;
        let mut _8: std::vec::Vec<i32>;
        scope 2 {
            debug buffer => _8;
            let mut _36: std::iter::Enumerate<std::slice::Iter<'_, i32>>;
            let _67: &[i32];
            let mut _186: &[&str; 2];
            let mut _187: &[&str; 2];
            scope 3 {
                debug iter => _36;
                let _44: usize;
                let _45: i32;
                scope 4 {
                    debug i => _44;
                    debug item => _45;
                }
            }
            scope 5 {
                debug slice => _67;
                let _71: &[i32];
                scope 6 {
                    debug safe_window => _71;
                    let _109: std::vec::Vec<i32>;
                    let mut _185: &[&str; 2];
                    scope 7 {
                        debug value => _96;
                        let _96: &i32;
                        let mut _184: &[&str; 2];
                    }
                    scope 8 {
                        debug more_data => _109;
                        let mut _144: std::slice::Chunks<'_, i32>;
                        let mut _182: &[&str; 2];
                        let mut _183: &[&str; 2];
                        scope 9 {
                            debug iter => _144;
                            let _151: &[i32];
                            scope 10 {
                                debug chunk => _151;
                                let mut _181: &[&str; 2];
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _4 = SizeOf([i32; 5]);
        _5 = AlignOf([i32; 5]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_7);
        _7 = ShallowInitBox(move _6, [i32; 5]);
        _189 = copy ((_7.0: std::ptr::Unique<[i32; 5]>).0: std::ptr::NonNull<[i32; 5]>) as *const [i32; 5] (Transmute);
        (*_189) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _3 = move _7;
        _2 = move _3 as std::boxed::Box<[i32]> (PointerCoercion(Unsize, Implicit));
        StorageDead(_7);
        StorageDead(_3);
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind: bb73];
    }

    bb2: {
        StorageDead(_2);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_1;
        _9 = Vec::<i32>::len(move _10) -> [return: bb3, unwind: bb72];
    }

    bb3: {
        StorageDead(_10);
        _8 = Vec::<i32>::with_capacity(move _9) -> [return: bb4, unwind: bb72];
    }

    bb4: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut _8;
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_1;
        _15 = &(*_16);
        _14 = <Vec<i32> as Deref>::deref(move _15) -> [return: bb5, unwind: bb71];
    }

    bb5: {
        _13 = &(*_14);
        StorageDead(_15);
        _11 = Vec::<i32>::extend_from_slice(move _12, move _13) -> [return: bb6, unwind: bb71];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_11);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _187 = const safe_buffer_operations::promoted[6];
        _21 = &(*_187);
        _20 = &(*_21);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_8;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(move _27) -> [return: bb7, unwind: bb71];
    }

    bb7: {
        StorageDead(_27);
        _25 = [move _26];
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _19 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(move _20, move _23) -> [return: bb8, unwind: bb71];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_20);
        _18 = _print(move _19) -> [return: bb9, unwind: bb71];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        _17 = const ();
        StorageDead(_17);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_1;
        _34 = <Vec<i32> as Deref>::deref(move _35) -> [return: bb10, unwind: bb71];
    }

    bb10: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = core::slice::<impl [i32]>::iter(move _33) -> [return: bb11, unwind: bb71];
    }

    bb11: {
        StorageDead(_33);
        _31 = <std::slice::Iter<'_, i32> as Iterator>::enumerate(move _32) -> [return: bb12, unwind: bb71];
    }

    bb12: {
        StorageDead(_32);
        _30 = <Enumerate<std::slice::Iter<'_, i32>> as IntoIterator>::into_iter(move _31) -> [return: bb13, unwind: bb71];
    }

    bb13: {
        StorageDead(_31);
        StorageLive(_36);
        _36 = move _30;
        goto -> bb14;
    }

    bb14: {
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut _36;
        _40 = &mut (*_41);
        _39 = <Enumerate<std::slice::Iter<'_, i32>> as Iterator>::next(move _40) -> [return: bb15, unwind: bb71];
    }

    bb15: {
        StorageDead(_40);
        _42 = discriminant(_39);
        switchInt(move _42) -> [0: bb18, 1: bb17, otherwise: bb16];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        StorageLive(_44);
        _44 = copy (((_39 as Some).0: (usize, &i32)).0: usize);
        StorageLive(_45);
        _188 = deref_copy (((_39 as Some).0: (usize, &i32)).1: &i32);
        _45 = copy (*_188);
        StorageLive(_46);
        StorageLive(_47);
        _47 = copy _44;
        StorageLive(_48);
        StorageLive(_49);
        _49 = &_8;
        _48 = Vec::<i32>::len(move _49) -> [return: bb19, unwind: bb71];
    }

    bb18: {
        _29 = const ();
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _186 = const safe_buffer_operations::promoted[5];
        _59 = &(*_186);
        _58 = &(*_59);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_8;
        _65 = &(*_66);
        _64 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(move _65) -> [return: bb25, unwind: bb71];
    }

    bb19: {
        StorageDead(_49);
        _46 = Lt(move _47, move _48);
        switchInt(move _46) -> [0: bb23, otherwise: bb20];
    }

    bb20: {
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_50);
        _50 = copy _45;
        _51 = AddWithOverflow(copy _50, const 1_i32);
        assert(!move (_51.1: bool), "attempt to compute `{} + {}`, which would overflow", move _50, const 1_i32) -> [success: bb21, unwind: bb71];
    }

    bb21: {
        StorageLive(_52);
        StorageLive(_53);
        _53 = &mut _8;
        StorageLive(_54);
        _54 = copy _44;
        _52 = <Vec<i32> as IndexMut<usize>>::index_mut(move _53, move _54) -> [return: bb22, unwind: bb71];
    }

    bb22: {
        StorageDead(_54);
        StorageDead(_53);
        (*_52) = move (_51.0: i32);
        StorageDead(_50);
        StorageDead(_52);
        _38 = const ();
        goto -> bb24;
    }

    bb23: {
        StorageDead(_48);
        StorageDead(_47);
        _38 = const ();
        goto -> bb24;
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_38);
        _37 = const ();
        goto -> bb14;
    }

    bb25: {
        StorageDead(_65);
        _63 = [move _64];
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _57 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(move _58, move _61) -> [return: bb26, unwind: bb71];
    }

    bb26: {
        StorageDead(_61);
        StorageDead(_58);
        _56 = _print(move _57) -> [return: bb27, unwind: bb71];
    }

    bb27: {
        StorageDead(_57);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_56);
        _55 = const ();
        StorageDead(_55);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_1;
        StorageLive(_70);
        _70 = RangeFull;
        _68 = <Vec<i32> as Index<RangeFull>>::index(move _69, move _70) -> [return: bb28, unwind: bb71];
    }

    bb28: {
        StorageDead(_70);
        StorageDead(_69);
        _67 = &(*_68);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &(*_67);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &(*_67);
        _76 = core::slice::<impl [i32]>::len(move _77) -> [return: bb29, unwind: bb71];
    }

    bb29: {
        StorageDead(_77);
        _75 = <usize as Ord>::min(move _76, const 3_usize) -> [return: bb30, unwind: bb71];
    }

    bb30: {
        StorageDead(_76);
        _74 = RangeTo::<usize> { end: move _75 };
        StorageDead(_75);
        _72 = <[i32] as Index<RangeTo<usize>>>::index(move _73, move _74) -> [return: bb31, unwind: bb71];
    }

    bb31: {
        StorageDead(_74);
        StorageDead(_73);
        _71 = &(*_72);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _185 = const safe_buffer_operations::promoted[4];
        _82 = &(*_185);
        _81 = &(*_82);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_71;
        _88 = &(*_89);
        _87 = core::fmt::rt::Argument::<'_>::new_debug::<&[i32]>(move _88) -> [return: bb32, unwind: bb71];
    }

    bb32: {
        StorageDead(_88);
        _86 = [move _87];
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _80 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(move _81, move _84) -> [return: bb33, unwind: bb71];
    }

    bb33: {
        StorageDead(_84);
        StorageDead(_81);
        _79 = _print(move _80) -> [return: bb34, unwind: bb71];
    }

    bb34: {
        StorageDead(_80);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_79);
        _78 = const ();
        StorageDead(_78);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_8;
        _93 = <Vec<i32> as Deref>::deref(move _94) -> [return: bb35, unwind: bb71];
    }

    bb35: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = core::slice::<impl [i32]>::get::<usize>(move _92, const 2_usize) -> [return: bb36, unwind: bb71];
    }

    bb36: {
        StorageDead(_92);
        _95 = discriminant(_91);
        switchInt(move _95) -> [1: bb37, otherwise: bb41];
    }

    bb37: {
        StorageLive(_96);
        _96 = copy ((_91 as Some).0: &i32);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _184 = const safe_buffer_operations::promoted[3];
        _101 = &(*_184);
        _100 = &(*_101);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &_96;
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_display::<&i32>(move _107) -> [return: bb38, unwind: bb71];
    }

    bb38: {
        StorageDead(_107);
        _105 = [move _106];
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _99 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(move _100, move _103) -> [return: bb39, unwind: bb71];
    }

    bb39: {
        StorageDead(_103);
        StorageDead(_100);
        _98 = _print(move _99) -> [return: bb40, unwind: bb71];
    }

    bb40: {
        StorageDead(_99);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_98);
        _97 = const ();
        StorageDead(_97);
        _90 = const ();
        StorageDead(_96);
        goto -> bb42;
    }

    bb41: {
        _90 = const ();
        goto -> bb42;
    }

    bb42: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _112 = SizeOf([i32; 3]);
        _113 = AlignOf([i32; 3]);
        _114 = alloc::alloc::exchange_malloc(move _112, move _113) -> [return: bb43, unwind: bb71];
    }

    bb43: {
        StorageLive(_115);
        _115 = ShallowInitBox(move _114, [i32; 3]);
        _190 = copy ((_115.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>) as *const [i32; 3] (Transmute);
        (*_190) = [const 6_i32, const 7_i32, const 8_i32];
        _111 = move _115;
        _110 = move _111 as std::boxed::Box<[i32]> (PointerCoercion(Unsize, Implicit));
        StorageDead(_115);
        StorageDead(_111);
        _109 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _110) -> [return: bb44, unwind: bb71];
    }

    bb44: {
        StorageDead(_110);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &mut _8;
        StorageLive(_118);
        StorageLive(_119);
        _119 = &_109;
        _118 = Vec::<i32>::len(move _119) -> [return: bb45, unwind: bb70];
    }

    bb45: {
        StorageDead(_119);
        _116 = Vec::<i32>::reserve(move _117, move _118) -> [return: bb46, unwind: bb70];
    }

    bb46: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &mut _8;
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_109;
        _124 = &(*_125);
        _123 = <Vec<i32> as Deref>::deref(move _124) -> [return: bb47, unwind: bb70];
    }

    bb47: {
        _122 = &(*_123);
        StorageDead(_124);
        _120 = Vec::<i32>::extend_from_slice(move _121, move _122) -> [return: bb48, unwind: bb70];
    }

    bb48: {
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_120);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _183 = const safe_buffer_operations::promoted[2];
        _130 = &(*_183);
        _129 = &(*_130);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &_8;
        _136 = &(*_137);
        _135 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(move _136) -> [return: bb49, unwind: bb70];
    }

    bb49: {
        StorageDead(_136);
        _134 = [move _135];
        StorageDead(_135);
        _133 = &_134;
        _132 = &(*_133);
        _128 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(move _129, move _132) -> [return: bb50, unwind: bb70];
    }

    bb50: {
        StorageDead(_132);
        StorageDead(_129);
        _127 = _print(move _128) -> [return: bb51, unwind: bb70];
    }

    bb51: {
        StorageDead(_128);
        StorageDead(_137);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_127);
        _126 = const ();
        StorageDead(_126);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_8;
        _142 = <Vec<i32> as Deref>::deref(move _143) -> [return: bb52, unwind: bb70];
    }

    bb52: {
        _141 = &(*_142);
        StorageDead(_143);
        _140 = core::slice::<impl [i32]>::chunks(move _141, const 2_usize) -> [return: bb53, unwind: bb70];
    }

    bb53: {
        StorageDead(_141);
        _139 = <Chunks<'_, i32> as IntoIterator>::into_iter(move _140) -> [return: bb54, unwind: bb70];
    }

    bb54: {
        StorageDead(_140);
        StorageLive(_144);
        _144 = move _139;
        goto -> bb55;
    }

    bb55: {
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = &mut _144;
        _147 = &mut (*_148);
        _146 = <Chunks<'_, i32> as Iterator>::next(move _147) -> [return: bb56, unwind: bb70];
    }

    bb56: {
        StorageDead(_147);
        _149 = discriminant(_146);
        switchInt(move _149) -> [0: bb58, 1: bb57, otherwise: bb16];
    }

    bb57: {
        StorageLive(_151);
        _151 = copy ((_146 as Some).0: &[i32]);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _181 = const safe_buffer_operations::promoted[0];
        _156 = &(*_181);
        _155 = &(*_156);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &_151;
        _162 = &(*_163);
        _161 = core::fmt::rt::Argument::<'_>::new_debug::<&[i32]>(move _162) -> [return: bb59, unwind: bb70];
    }

    bb58: {
        _138 = const ();
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_138);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &mut _8;
        _164 = Vec::<i32>::clear(move _165) -> [return: bb62, unwind: bb70];
    }

    bb59: {
        StorageDead(_162);
        _160 = [move _161];
        StorageDead(_161);
        _159 = &_160;
        _158 = &(*_159);
        _154 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(move _155, move _158) -> [return: bb60, unwind: bb70];
    }

    bb60: {
        StorageDead(_158);
        StorageDead(_155);
        _153 = _print(move _154) -> [return: bb61, unwind: bb70];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_153);
        _152 = const ();
        StorageDead(_152);
        _145 = const ();
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_145);
        _37 = const ();
        goto -> bb55;
    }

    bb62: {
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &mut _8;
        _166 = Vec::<i32>::shrink_to_fit(move _167) -> [return: bb63, unwind: bb70];
    }

    bb63: {
        StorageDead(_167);
        StorageDead(_166);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _182 = const safe_buffer_operations::promoted[1];
        _172 = &(*_182);
        _171 = &(*_172);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _179 = &_8;
        _178 = &(*_179);
        _177 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(move _178) -> [return: bb64, unwind: bb70];
    }

    bb64: {
        StorageDead(_178);
        _176 = [move _177];
        StorageDead(_177);
        _175 = &_176;
        _174 = &(*_175);
        _170 = core::fmt::rt::<impl Arguments<'_>>::new_v1::<2, 1>(move _171, move _174) -> [return: bb65, unwind: bb70];
    }

    bb65: {
        StorageDead(_174);
        StorageDead(_171);
        _169 = _print(move _170) -> [return: bb66, unwind: bb70];
    }

    bb66: {
        StorageDead(_170);
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_172);
        StorageDead(_169);
        _168 = const ();
        StorageDead(_168);
        StorageLive(_180);
        _180 = ();
        _0 = Result::<(), Box<dyn std::error::Error>>::Ok(move _180);
        StorageDead(_180);
        drop(_109) -> [return: bb67, unwind: bb71];
    }

    bb67: {
        StorageDead(_109);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_67);
        drop(_8) -> [return: bb68, unwind: bb72];
    }

    bb68: {
        StorageDead(_8);
        drop(_1) -> [return: bb69, unwind: bb73];
    }

    bb69: {
        StorageDead(_1);
        return;
    }

    bb70 (cleanup): {
        drop(_109) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_8) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_1) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        resume;
    }
}
