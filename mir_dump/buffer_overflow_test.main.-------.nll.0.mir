// MIR for `main` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?1]
| '?1 | Local | ['?1]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=1], bb1[0..=2], bb2[0], '?0, '?1}
| '?1 | U0 | {bb0[0..=1], bb1[0..=2], bb2[0], '?1}
|
| Inference Constraints
| '?0 live at {bb0[0..=1], bb1[0..=2], bb2[0]}
| '?1 live at {bb0[0..=1], bb1[0..=2], bb2[0]}
|
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at examples/buffer_overflow_test.rs:29:10: 29:10
    let _1: ();                          // in scope 0 at examples/buffer_overflow_test.rs:30:5: 30:27

    bb0: {
        StorageLive(_1);                 // scope 0 at examples/buffer_overflow_test.rs:30:5: 30:27
        _1 = test_buffer_overflow() -> [return: bb1, unwind: bb2]; // scope 0 at examples/buffer_overflow_test.rs:30:5: 30:27
                                         // mir::ConstOperand
                                         // + span: examples/buffer_overflow_test.rs:30:5: 30:25
                                         // + const_: Const { ty: fn() {test_buffer_overflow}, val: Value(test_buffer_overflow) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at examples/buffer_overflow_test.rs:30:27: 30:28
        _0 = const ();                   // scope 0 at examples/buffer_overflow_test.rs:29:11: 31:2
        return;                          // scope 0 at examples/buffer_overflow_test.rs:31:2: 31:2
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at examples/buffer_overflow_test.rs:29:1: 31:2
    }
}
